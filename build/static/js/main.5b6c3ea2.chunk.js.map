{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"oOAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBACA,iBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCW3B,EAlBA,WAEX,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgB9B,EAZA,SAAAC,GAEX,OADgBL,IAAMM,KATV,aASwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAU9B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAfJ,aAeI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZvCK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAKAC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKlB,UAAU,SACZkB,IAwHQC,EAnHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAKH,IAiEMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcmB,QAASS,IACvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAACtC,EAAMuC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBA1DD,SAAAa,GACzB,IAAMd,EAAOyB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAShC6B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAGhD+B,EACUpB,EAAI6B,GACXlC,MAAK,SAAAmC,GAONlB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO4C,SAEpDC,OAAM,SAAAC,GACLd,EAAgB,SAAD,OACJhC,EAAKK,QADD,sCAGf0C,YAAW,WACTf,EAAgB,QACf,KAKHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAOA,SAuBNkC,CAAmBhD,EAAKc,WAItD,0BAAMmC,SAvFM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjB/C,QAASsB,EACT0B,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG7BvB,EACUkB,GACP3C,MAAK,SAAAmC,GACJlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,SA2EX,2BACE+B,MAAOhC,EACPiC,SAvEiB,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB/B,EAAWsB,EAAMa,OAAOJ,UAsEpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MCzINC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5b6c3ea2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' \n    : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data) // palauttaa response.datan\n}\n\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data) // palauttaa response.datan\n}\n\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data) // palauttaa response.datan\n}\n\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  \n\n\n  // tapahtumankasittelija onSubmitille\n  const addNote = (event) => {\n    event.preventDefault()\n    // luodaan olio uutta muistiinpanoa varten\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  // tapahtumankasittelija lomakkeen input-komponentin\n  // muutokselle\n  const handleNoteChange = (event) => {\n    console.log(event.target.value) // viittaa syotekentan arvoon\n    setNewNote(event.target.value)\n  }\n\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id) // etsitaan muutettava muistiinpano\n\n    /* \n    - maaritellaan uusi olio, jonka sisalto sama kuin vanhan note-olion poislukien\n      important-kentta\n    - ...note luo olion jolla on kenttinaan kopiot note-olion kenttien arvoista\n    - sitten important-kenttaan tulee vanhan kaanteisarvo\n    - suositeltavaa on nimenomaan tehda oliosta kopio sita muokattaessa, koska muuten\n      muokataan notesia joka on TILA, eli sita ei saa muuttaa suoraan */\n    const changedNote = { ...note, important: !note.important }\n\n    /* PUT-pyynnolla korvataan vanha muistiinpano palvelimella */\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n\n      /* luodaan uusi taulukko vanhan taulukon perusteella\n         Jos note.id !== id on tosi, otetaan uuteen taulukkoon suoraan vanhan\n         taulukon kyseinen alkio. Jos epatosi, eli kyseessa on muutettu muistiinpano,\n         otetaan uuteen taulukkoon palvelimen palauttama olio (joka on tassa tapauksessa\n         muutettu, koska PUT-metodi on juuri muutoksen tehnyt) */\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n            /* Olematon muistiinpano poistetaan filterilla, jonka luoman uuden taulukon\n         sisalloksi tulee alkuperaisen taulukon sisallosta ne alkiot, joille\n         parametrina oleva funktio palauttaa arvon true \n         ...kaytannossa hylkaa vain sen jonka id on tama kasittelyssa oleva id */\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n            key={i} \n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote}\n          onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}